// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview This file defines a Genkit flow to analyze self-evaluation and manager feedback to identify key strengths and areas for improvement for an employee.
 *
 * - generatePerformanceInsights - A function that triggers the performance insights generation flow.
 * - GeneratePerformanceInsightsInput - The input type for the generatePerformanceInsights function.
 * - GeneratePerformanceInsightsOutput - The return type for the generatePerformanceInsights function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const GeneratePerformanceInsightsInputSchema = z.object({
  employeeId: z.string().describe('The ID of the employee.'),
  selfEvaluation: z.record(z.string(), z.number()).describe('The self-evaluation data for the employee. Each key represents the criteria and the value represents the rating.'),
  managerFeedback: z.record(z.string(), z.number()).describe('The manager feedback data for the employee. Each key represents the criteria and the value represents the rating.'),
});

export type GeneratePerformanceInsightsInput = z.infer<typeof GeneratePerformanceInsightsInputSchema>;

const GeneratePerformanceInsightsOutputSchema = z.object({
  strengths: z.string().describe('Key strengths of the employee based on the evaluation and feedback.'),
  areasForImprovement: z.string().describe('Areas for improvement for the employee based on the evaluation and feedback.'),
});

export type GeneratePerformanceInsightsOutput = z.infer<typeof GeneratePerformanceInsightsOutputSchema>;

export async function generatePerformanceInsights(input: GeneratePerformanceInsightsInput): Promise<GeneratePerformanceInsightsOutput> {
  return generatePerformanceInsightsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generatePerformanceInsightsPrompt',
  input: {
    schema: z.object({
      employeeId: z.string().describe('The ID of the employee.'),
      selfEvaluation: z.record(z.string(), z.number()).describe('The self-evaluation data for the employee.'),
      managerFeedback: z.record(z.string(), z.number()).describe('The manager feedback data for the employee.'),
    }),
  },
  output: {
    schema: z.object({
      strengths: z.string().describe('Key strengths of the employee.'),
      areasForImprovement: z.string().describe('Areas for improvement for the employee.'),
    }),
  },
  prompt: `You are a performance analysis expert. Analyze the self-evaluation and manager feedback provided below to identify key strengths and areas for improvement for the employee.

  Employee ID: {{{employeeId}}}

  Self-Evaluation:
  {{#each selfEvaluation}}
  {{@key}}: {{@value}}
  {{/each}}

  Manager Feedback:
  {{#each managerFeedback}}
  {{@key}}: {{@value}}
  {{/each}}

  Based on the above information, provide a concise summary of the employee's key strengths and areas for improvement.

  Strengths:
  
  Areas for Improvement:
  `,
});

const generatePerformanceInsightsFlow = ai.defineFlow<
  typeof GeneratePerformanceInsightsInputSchema,
  typeof GeneratePerformanceInsightsOutputSchema
>(
  {
    name: 'generatePerformanceInsightsFlow',
    inputSchema: GeneratePerformanceInsightsInputSchema,
    outputSchema: GeneratePerformanceInsightsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
